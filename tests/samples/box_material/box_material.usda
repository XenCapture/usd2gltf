#usda 1.0
(
    defaultPrim = "box_material"
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "box_material" (
    kind = "component"
)
{
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 5, 7, 6, 6, 7, 2, 3, 5, 4, 1, 0, 5, 0, 2, 7, 1, 4, 6, 3]
        rel material:binding = </materials/usd_preview_surface>
        normal3f[] normals = [(0, 0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (0, -0, -1), (-0, -0, -1), (-0, 0, -1), (-0, -0, -1), (-0, 1, -0), (-0, 1, -0), (-0, 1, -0), (0, 1, 0), (-0, -1, -0), (-0, -1, 0), (-0, -1, -0), (0, -1, -0), (1, -0, -0), (1, -0, -0), (1, -0, -0), (1, 0, 0), (-1, -0, -0), (-1, 0, -0), (-1, -0, -0), (-1, -0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token orientation = "leftHanded"
        point3f[] points = [(0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)] (
            interpolation = "vertex"
        )
        float primvars:coverage = 0.99220276
        int[] primvars:coverage:indices = None
        int primvars:numnonpacked = 0
        int[] primvars:numnonpacked:indices = None
        texCoord2f[] primvars:st = [(6.099315e-17, 0), (0, 0.9960937), (0.9960938, 0.9960937), (0.9960938, 0), (0, 0.9960937), (0.9960938, 0.9960937), (0.9960938, 0), (6.099315e-17, 0), (0, 0.9960937), (0.9960938, 0.9960937), (0.9960938, 0), (6.099315e-17, 0), (0, 0.9960937), (0.9960938, 0.9960937), (0.9960938, 0), (6.099315e-17, 0), (0, 0.9960937), (0.9960938, 0.9960937), (0.9960938, 0), (6.099315e-17, 0), (0, 0.9960937), (0.9960938, 0.9960937), (0.9960938, 0), (6.099315e-17, 0)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = None
        uniform token subdivisionScheme = "none"
    }
}

def Scope "materials"
{
    def Material "usd_preview_surface"
    {
        token outputs:displacement.connect = </materials/usd_preview_surface/usd_preview_surface.outputs:displacement>
        token outputs:surface.connect = </materials/usd_preview_surface/usd_preview_surface.outputs:surface>

        def Shader "usd_preview_surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </materials/usd_preview_surface/usduvtexture1.outputs:rgb>
            token outputs:displacement
            token outputs:surface
        }

        def Shader "usduvtexture1"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @../../../../temp/UVChecker_1K.png@
            vector3f outputs:rgb
        }
    }
}

