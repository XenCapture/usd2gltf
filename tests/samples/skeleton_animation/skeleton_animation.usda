#usda 1.0
(
    defaultPrim = "Geometry"
    endTimeCode = 40
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "Geometry" (
    kind = "component"
)
{
    def SkelRoot "character"
    {
        matrix4d primvars:localtransform.timeSamples = {
            1: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            2: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            3: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            4: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            5: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            6: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            7: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            8: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            9: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            10: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            11: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            12: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            13: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            14: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            15: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            16: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            17: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            18: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            19: ( (1, 0, 0, 0), (0, 0.9601702690124512, 0.279415488243103, 0), (0, -0.279415488243103, 0.9601702690124512, 0), (-0.2606593072414398, -1.5971977710723877, 0.03461024910211563, 1) ),
            20: ( (1, 0, 0, 0), (0, 0.5509648323059082, 0.8345284461975098, 0), (0, -0.8345284461975098, 0.5509648323059082, 0), (-0.2606593072414398, -1.4387773275375366, 0.03461024910211563, 1) ),
            21: ( (1, 0, 0, 0), (0, -0.11152003705501556, 0.993762195110321, 0), (0, -0.993762195110321, -0.11152003705501556, 0), (-0.2606593072414398, -1.2823410034179688, 0.03461024910211563, 1) ),
            22: ( (1, 0, 0, 0), (0, -0.7117314338684082, 0.7024517059326172, 0), (0, -0.7024517059326172, -0.7117314338684082, 0), (-0.2606593072414398, -1.1292943954467773, 0.03461024910211563, 1) ),
            23: ( (1, 0, 0, 0), (0, -0.9927541613578796, 0.12016309052705765, 0), (0, -0.12016309052705765, -0.9927541613578796, 0), (-0.2606593072414398, -0.9811583757400513, 0.03461024910211563, 1) ),
            24: ( (1, 0, 0, 0), (0, -0.8734093904495239, -0.4869866967201233, 0), (0, 0.4869866967201233, -0.8734093904495239, 0), (-0.2606593072414398, -0.8396130800247192, 0.03461024910211563, 1) ),
            25: ( (1, 0, 0, 0), (0, -0.45358461141586304, -0.8912132382392883, 0), (0, 0.8912132382392883, -0.45358461141586304, 0), (-0.2606593072414398, -0.7065533399581909, 0.03461024910211563, 1) ),
            26: ( (1, 0, 0, 0), (0, 0.07309262454509735, -0.9973251819610596, 0), (0, 0.9973251819610596, 0.07309262454509735, 0), (-0.2606593072414398, -0.5841665267944336, 0.03461024910211563, 1) ),
            27: ( (1, 0, 0, 0), (0, 0.5296533703804016, -0.8482142090797424, 0), (0, 0.8482142090797424, 0.5296533703804016, 0), (-0.2606593072414398, -0.47503387928009033, 0.03461024910211563, 1) ),
            28: ( (1, 0, 0, 0), (0, 0.8251280188560486, -0.5649458169937134, 0), (0, 0.5649458169937134, 0.8251280188560486, 0), (-0.2606593072414398, -0.3822805881500244, 0.03461024910211563, 1) ),
            29: ( (1, 0, 0, 0), (0, 0.9615519046783447, -0.2746233344078064, 0), (0, 0.2746233344078064, 0.9615519046783447, 0), (-0.2606593072414398, -0.3097924292087555, 0.03461024910211563, 1) ),
            30: ( (1, 0, 0, 0), (0, 0.9976718425750732, -0.06819739192724228, 0), (0, 0.06819739192724228, 0.9976718425750732, 0), (-0.2606593072414398, -0.26255422830581665, 0.03461024910211563, 1) ),
            31: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            32: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            33: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            34: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            35: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            36: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            37: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            38: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            39: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            40: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            41: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            42: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            43: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            44: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            45: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            46: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            48: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            49: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
            50: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ),
        }
        int[] primvars:localtransform:indices = None
        int primvars:scaleinheritance.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 0,
            27: 0,
            28: 0,
            29: 0,
            30: 0,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            48: 0,
            49: 0,
            50: 0,
        }
        int[] primvars:scaleinheritance:indices = None
        float primvars:t.timeSamples = {
            1: -3,
            2: -3,
            3: -3,
            4: -3,
            5: -3,
            6: -3,
            7: -3,
            8: -3,
            9: -3,
            10: -3,
            11: -3,
            12: -3,
            13: -3,
            14: -3,
            15: -3,
            16: -3,
            17: -3,
            18: -3,
            19: -3,
            20: -2.6479545,
            21: -2.3003182,
            22: -1.9602145,
            23: -1.6310234,
            24: -1.3164781,
            25: -1.0207899,
            26: -0.74881923,
            27: -0.50630224,
            28: -0.3001838,
            29: -0.13909897,
            30: -0.034125183,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            48: 0,
            49: 0,
            50: 0,
        }
        int[] primvars:t:indices = None
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        matrix4d xformOp:transform.timeSamples = {
            1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            2: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            3: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            4: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            5: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            6: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            7: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            8: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            9: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            10: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            11: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            12: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            13: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            14: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            15: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            16: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            17: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            18: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            19: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            20: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            21: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            22: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            23: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            24: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            25: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            26: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            27: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            28: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            29: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            30: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            31: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            32: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            33: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            34: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            35: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            36: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            37: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            38: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            39: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            40: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            41: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            42: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            43: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            44: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            45: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            46: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            48: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            49: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            50: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def SkelAnimation "animation"
        {
            uniform token[] joints = ["root", "root/piece0", "root/piece1", "root/piece2", "root/piece3"]
            quatf[] rotations.timeSamples = {
                1: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0)],
                2: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.8806148, 0.47383288, 0, 0)],
                3: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.6665133, -0.7454931, 0, 0)],
                4: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.3796502, -0.9251301, 0, 0)],
                5: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.060190678, -0.9981869, 0, 0)],
                6: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.25158557, -0.96783507, 0, 0)],
                7: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.52269274, -0.8525211, 0, 0)],
                8: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.88061494, 0.47383264, 0, 0), (0.73249334, -0.6807742, 0, 0)],
                9: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.66651297, -0.7454935, 0, 0), (0.87454367, -0.48494682, 0, 0)],
                10: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.3796502, -0.9251301, 0, 0), (0.95528215, -0.29569578, 0, 0)],
                11: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.060190912, -0.9981869, 0, 0), (0.99034137, -0.13865076, 0, 0)],
                12: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.25158593, -0.96783495, 0, 0), (0.9994178, -0.034118615, 0, 0)],
                13: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.9899925, 0.14112, 0, 0), (0.52269274, -0.8525211, 0, 0), (1, 0, 0, 0)],
                14: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.8806148, 0.47383288, 0, 0), (0.7324935, -0.68077403, 0, 0), (1, 0, 0, 0)],
                15: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.6665133, -0.7454931, 0, 0), (0.87454355, -0.484947, 0, 0), (1, 0, 0, 0)],
                16: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.3796502, -0.9251301, 0, 0), (0.95528215, -0.29569578, 0, 0), (1, 0, 0, 0)],
                17: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (-0.060190678, -0.9981869, 0, 0), (0.99034137, -0.13865066, 0, 0), (1, 0, 0, 0)],
                18: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.25158557, -0.96783507, 0, 0), (0.9994178, -0.034118667, 0, 0), (1, 0, 0, 0)],
                19: [(1, 0, 0, 0), (0.9899925, 0.14112, 0, 0), (0.52269274, -0.8525211, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                20: [(1, 0, 0, 0), (0.8806148, 0.47383288, 0, 0), (0.7324935, -0.68077403, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                21: [(1, 0, 0, 0), (-0.6665133, -0.7454931, 0, 0), (0.87454355, -0.484947, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                22: [(1, 0, 0, 0), (-0.3796502, -0.9251301, 0, 0), (0.95528215, -0.29569578, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                23: [(1, 0, 0, 0), (-0.060190678, -0.9981869, 0, 0), (0.99034137, -0.13865066, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                24: [(1, 0, 0, 0), (0.25158557, -0.96783507, 0, 0), (0.9994178, -0.034118667, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                25: [(1, 0, 0, 0), (0.52269274, -0.8525211, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                26: [(1, 0, 0, 0), (0.7324932, -0.68077433, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                27: [(1, 0, 0, 0), (0.8745437, -0.48494673, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                28: [(1, 0, 0, 0), (0.95528215, -0.29569578, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                29: [(1, 0, 0, 0), (0.9903413, -0.13865085, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                30: [(1, 0, 0, 0), (0.9994178, -0.03411856, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                31: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                32: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                33: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                34: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                35: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                36: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                37: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                38: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                39: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                40: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                41: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                42: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                43: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                44: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                45: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                46: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                48: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                49: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                50: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
            }
            half3[] scales.timeSamples = {
                1: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                2: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                3: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                4: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                5: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                6: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                7: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                8: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                9: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                10: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                11: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                12: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                13: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                14: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                15: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                16: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                17: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                18: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                19: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                20: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                21: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                22: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                23: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                24: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                25: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                26: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                27: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                28: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                29: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                30: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                31: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                32: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                33: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                34: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                35: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                36: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                37: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                38: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                39: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                40: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                41: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                42: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                43: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                44: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                45: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                46: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                48: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                49: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                50: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
            }
            float3[] translations.timeSamples = {
                1: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -1.1028141, 0.03461025), (0.25939408, -1.1028141, 0.03461025)],
                2: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -1.1028141, 0.03461025), (0.25939408, -0.94439363, 0.03461025)],
                3: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -1.1028141, 0.03461025), (0.25939408, -0.7879573, 0.03461025)],
                4: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -1.1028141, 0.03461025), (0.25939408, -0.6349107, 0.03461025)],
                5: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -1.1028141, 0.03461025), (0.25939408, -0.48677468, 0.03461025)],
                6: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -1.1028141, 0.03461025), (0.25939408, -0.34522933, 0.03461025)],
                7: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -1.1028141, 0.03461025), (0.25939408, -0.21216957, 0.03461025)],
                8: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -0.94439375, 0.03461025), (0.25939408, -0.08978273, 0.03461025)],
                9: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -0.7879572, 0.03461025), (0.25939408, 0.019349784, 0.03461025)],
                10: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -0.6349107, 0.03461025), (0.25939408, 0.112103134, 0.03461025)],
                11: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -0.4867748, 0.03461025), (0.25939408, 0.18459135, 0.03461025)],
                12: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -0.34522915, 0.03461025), (0.25939408, 0.23182948, 0.03461025)],
                13: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.5971978, 0.03461025), (-0.2606593, -0.21216957, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                14: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.4387773, 0.03461025), (-0.2606593, -0.08978261, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                15: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.282341, 0.03461025), (-0.2606593, 0.01934971, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                16: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -1.1292944, 0.03461025), (-0.2606593, 0.112103134, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                17: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -0.9811584, 0.03461025), (-0.2606593, 0.18459138, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                18: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -0.8396131, 0.03461025), (-0.2606593, 0.23182946, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                19: [(0, 0, 0), (-0.2606593, -1.5971978, 0.03461025), (0.25939408, -0.70655334, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                20: [(0, 0, 0), (-0.2606593, -1.4387773, 0.03461025), (0.25939408, -0.58416635, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                21: [(0, 0, 0), (-0.2606593, -1.282341, 0.03461025), (0.25939408, -0.47503403, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                22: [(0, 0, 0), (-0.2606593, -1.1292944, 0.03461025), (0.25939408, -0.3822806, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                23: [(0, 0, 0), (-0.2606593, -0.9811584, 0.03461025), (0.25939408, -0.30979234, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                24: [(0, 0, 0), (-0.2606593, -0.8396131, 0.03461025), (0.25939408, -0.2625543, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                25: [(0, 0, 0), (-0.2606593, -0.70655334, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                26: [(0, 0, 0), (-0.2606593, -0.5841665, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                27: [(0, 0, 0), (-0.2606593, -0.47503388, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                28: [(0, 0, 0), (-0.2606593, -0.3822806, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                29: [(0, 0, 0), (-0.2606593, -0.30979243, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                30: [(0, 0, 0), (-0.2606593, -0.26255423, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                31: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                32: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                33: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                34: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                35: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                36: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                37: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                38: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                39: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                40: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                41: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                42: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                43: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                44: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                45: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                46: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                48: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                49: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
                50: [(0, 0, 0), (-0.2606593, -0.2471979, 0.03461025), (0.25939408, -0.2471979, 0.03461025), (-0.2606593, 0.24718584, 0.03461025), (0.25939408, 0.24718584, 0.03461025)],
            }
        }

        def Mesh "piece3" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [9, 2, 0, 1, 2, 6, 5, 0, 3, 13, 12, 8, 4, 1, 0, 5, 7, 9, 1, 4, 12, 13, 10, 11]
            normal3f[] normals = [(1, 0, 0), (1, 0, 0), (1, -0, -0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0, -0, 1), (-2.8331288e-8, -1, 6.789135e-8), (-2.8331288e-8, -1, 1.6516344e-10), (2.833129e-8, -1, 1.6516749e-10), (2.833129e-8, -1, 6.789135e-8), (0, 1, 0), (-0, 1, -0), (-0, 1, -0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (-0, 0, -1), (0, 0, -1), (-1, -0, -7.1416444e-8), (-1, 0, -7.1416444e-8), (-1, 0, -7.1416444e-8), (-1, -0, -7.1416444e-8)] (
                interpolation = "faceVarying"
            )
            uniform token orientation = "leftHanded"
            point3f[] points = [(0.5187882, 0.4943717, 0.25163028), (0.5187882, 0.4943717, -0.18240978), (0.5187882, 1.2097043e-8, 0.25163028), (0.5187882, -1.7370525e-8, -0.18240978), (1.4750867e-11, 0.4943717, -0.18240978), (-3.0982847e-8, 0.4943717, 0.25163028), (-3.0982847e-8, -2.6008968e-9, 0.25163028), (1.4750867e-11, -2.6725853e-9, -0.18240978), (0.5187882, 1.2097043e-8, 0.25163028), (0.5187882, -1.7370525e-8, -0.18240978), (1.4750867e-11, 0.4943717, -0.18240978), (-3.0982847e-8, 0.4943717, 0.25163028), (-3.0982847e-8, -2.6008968e-9, 0.25163028), (1.4750867e-11, -2.6725853e-9, -0.18240978)] (
                interpolation = "vertex"
            )
            int[] primvars:index = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] (
                interpolation = "vertex"
            )
            int[] primvars:index:indices = None
            uniform matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform int[] primvars:skel:jointIndices = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform token[] skel:joints = ["root/piece0", "root/piece1", "root/piece2", "root/piece3"]
            append rel skel:skeleton = </Geometry/character/skeleton>
            uniform token subdivisionScheme = "none"
        }

        def Mesh "piece2" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [1, 4, 5, 0, 2, 3, 1, 0, 3, 7, 4, 1, 6, 2, 0, 5, 13, 9, 8, 12, 10, 13, 12, 11]
            normal3f[] normals = [(-0, 1, -0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, -0, -0), (-1, -0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0, -0, -1), (0, 0, 1), (0, 0, 1), (-0, -0, 1), (0, 0, 1), (-2.5162414e-8, -1, -3.4679942e-8), (-2.5162414e-8, -1, -6.789136e-8), (2.4887803e-9, -1, -6.789136e-8), (2.4887803e-9, -1, -3.4679942e-8), (1, -2.6414562e-9, 7.1416444e-8), (1, -2.6414562e-9, 4.3872205e-8), (1, 2.1541359e-8, 4.387221e-8), (1, 2.1541359e-8, 7.1416444e-8)] (
                interpolation = "faceVarying"
            )
            uniform token orientation = "leftHanded"
            point3f[] points = [(-0.5213186, 0.4943717, 0.25163028), (-0.5213186, 0.4943717, -0.18240978), (-0.5213186, -1.7370525e-8, 0.25163028), (-0.5213186, 1.2097043e-8, -0.18240978), (1.4750867e-11, 0.4943717, -0.18240978), (-3.0982847e-8, 0.4943717, 0.25163028), (-2.0333408e-8, -1.6073077e-8, 0.25163028), (-1.2911104e-9, -1.020592e-9, -0.18240978), (-0.5213186, -1.7370525e-8, 0.25163028), (-0.5213186, 1.2097043e-8, -0.18240978), (1.4750867e-11, 0.4943717, -0.18240978), (-3.0982847e-8, 0.4943717, 0.25163028), (-2.0333408e-8, -1.6073077e-8, 0.25163028), (-1.2911104e-9, -1.020592e-9, -0.18240978)] (
                interpolation = "vertex"
            )
            int[] primvars:index = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2] (
                interpolation = "vertex"
            )
            int[] primvars:index:indices = None
            uniform matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform int[] primvars:skel:jointIndices = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform token[] skel:joints = ["root/piece0", "root/piece1", "root/piece2", "root/piece3"]
            append rel skel:skeleton = </Geometry/character/skeleton>
            uniform token subdivisionScheme = "none"
        }

        def Mesh "piece1" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 4, 5, 2, 1, 6, 4, 0, 1, 0, 2, 9, 11, 13, 3, 8, 6, 1, 9, 7, 10, 12, 13, 11]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0, -1, -0), (0, -1, 0), (0, -1, 0), (0, -1, -0), (1, -0, -0), (1, -0, -0), (1, 0, 0), (1, 0, 0), (-2.5232003e-8, 1, -3.4806977e-8), (2.447778e-9, 1, -3.4806977e-8), (2.447778e-9, 1, -6.789135e-8), (-2.5232007e-8, 1, -6.789135e-8), (0, 0, -1), (-0, -0, -1), (0, 0, -1), (0, 0, -1), (-1, 6.012716e-8, -7.1416444e-8), (-1, -4.122818e-8, -7.141645e-8), (-1, -4.1228173e-8, 4.4032916e-8), (-1, 6.012716e-8, 4.4032912e-8)] (
                interpolation = "faceVarying"
            )
            uniform token orientation = "leftHanded"
            point3f[] points = [(0.5187882, -0.4943958, 0.25163028), (0.5187882, -0.4943958, -0.18240978), (0.5187882, 1.2097043e-8, 0.25163028), (0.5187882, -1.7370525e-8, -0.18240978), (-3.0982847e-8, -0.4943958, 0.25163028), (-1.2562342e-9, -9.930233e-10, 0.25163028), (1.4750867e-11, -0.4943958, -0.18240978), (-2.0368283e-8, -1.6100646e-8, -0.18240978), (0.5187882, 1.2097043e-8, 0.25163028), (0.5187882, -1.7370525e-8, -0.18240978), (-3.0982847e-8, -0.4943958, 0.25163028), (-1.2562342e-9, -9.930233e-10, 0.25163028), (1.4750867e-11, -0.4943958, -0.18240978), (-2.0368283e-8, -1.6100646e-8, -0.18240978)] (
                interpolation = "vertex"
            )
            int[] primvars:index = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "vertex"
            )
            int[] primvars:index:indices = None
            uniform matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform int[] primvars:skel:jointIndices = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform token[] skel:joints = ["root/piece0", "root/piece1", "root/piece2", "root/piece3"]
            append rel skel:skeleton = </Geometry/character/skeleton>
            uniform token subdivisionScheme = "none"
        }

        def Mesh "piece0" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [1, 6, 7, 3, 0, 1, 3, 2, 4, 0, 2, 5, 6, 1, 0, 4, 8, 9, 13, 11, 12, 10, 11, 13]
            normal3f[] normals = [(0, -0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, -0, -0), (-1, 0, -0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (-0, -0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (-0, -1, 0), (-0, -1, -0), (0, -1, 0), (-2.833129e-8, 1, 6.789136e-8), (2.833129e-8, 1, 6.789136e-8), (2.833129e-8, 1, -1.651675e-10), (-2.833129e-8, 1, -1.6516345e-10), (1, 6.269794e-8, 7.1416444e-8), (1, -6.269794e-8, 7.1416444e-8), (1, -6.269794e-8, -7.1416444e-8), (1, 6.269794e-8, -7.1416444e-8)] (
                interpolation = "faceVarying"
            )
            uniform token orientation = "leftHanded"
            point3f[] points = [(-0.5213186, -0.4943958, 0.25163028), (-0.5213186, -0.4943958, -0.18240978), (-0.5213186, -1.7370525e-8, 0.25163028), (-0.5213186, 1.2097043e-8, -0.18240978), (-3.0982847e-8, -0.4943958, 0.25163028), (1.4750867e-11, -2.600896e-9, 0.25163028), (1.4750867e-11, -0.4943958, -0.18240978), (-3.0982847e-8, -2.6725844e-9, -0.18240978), (-0.5213186, -1.7370525e-8, 0.25163028), (-0.5213186, 1.2097043e-8, -0.18240978), (-3.0982847e-8, -0.4943958, 0.25163028), (1.4750867e-11, -2.600896e-9, 0.25163028), (1.4750867e-11, -0.4943958, -0.18240978), (-3.0982847e-8, -2.6725844e-9, -0.18240978)] (
                interpolation = "vertex"
            )
            int[] primvars:index = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "vertex"
            )
            int[] primvars:index:indices = None
            uniform matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform int[] primvars:skel:jointIndices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            uniform token[] skel:joints = ["root/piece0", "root/piece1", "root/piece2", "root/piece3"]
            append rel skel:skeleton = </Geometry/character/skeleton>
            uniform token subdivisionScheme = "none"
        }

        def Skeleton "skeleton"
        {
            uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, -0, 0), (0, 1, -0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ), ( (1, 0, -0, 0), (0, 1, -0, 0), (-0, 0, 1, 0), (0.2593940794467926, -0.24719789624214172, 0.03461024910211563, 1) ), ( (1, 0, -0, 0), (0, 1, -0, 0), (0, -0, 1, 0), (-0.2606593072414398, 0.2471858412027359, 0.03461024910211563, 1) ), ( (1, 0, -0, 0), (-0, 1, -0, 0), (0, -0, 1, 0), (0.2593940794467926, 0.2471858412027359, 0.03461024910211563, 1) )]
            uniform token[] jointNames = ["root", "piece0", "piece1", "piece2", "piece3"]
            uniform token[] joints = ["root", "root/piece0", "root/piece1", "root/piece2", "root/piece3"]
            uniform token purpose = "guide"
            uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, -0.24719789624214172, 0.03461024910211563, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.2593940794467926, -0.24719789624214172, 0.03461024910211563, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.2606593072414398, 0.2471858412027359, 0.03461024910211563, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.2593940794467926, 0.2471858412027359, 0.03461024910211563, 1) )]
            append rel skel:animationSource = </Geometry/character/animation>
            uniform token visibility = "invisible"
        }
    }
}

